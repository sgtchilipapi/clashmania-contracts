// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Owner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Owner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Owner", id.toString(), this);
    }
  }

  static load(id: string): Owner | null {
    return changetype<Owner | null>(store.get("Owner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get equipments(): Array<string> {
    let value = this.get("equipments");
    return value!.toStringArray();
  }

  set equipments(value: Array<string>) {
    this.set("equipments", Value.fromStringArray(value));
  }
}

export class Minter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Minter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Minter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Minter", id.toString(), this);
    }
  }

  static load(id: string): Minter | null {
    return changetype<Minter | null>(store.get("Minter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get equipments(): Array<string> {
    let value = this.get("equipments");
    return value!.toStringArray();
  }

  set equipments(value: Array<string>) {
    this.set("equipments", Value.fromStringArray(value));
  }
}

export class Equipment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Equipment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Equipment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Equipment", id.toString(), this);
    }
  }

  static load(id: string): Equipment | null {
    return changetype<Equipment | null>(store.get("Equipment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get idNum(): i32 {
    let value = this.get("idNum");
    return value!.toI32();
  }

  set idNum(value: i32) {
    this.set("idNum", Value.fromI32(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get minter(): string | null {
    let value = this.get("minter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minter(value: string | null) {
    if (!value) {
      this.unset("minter");
    } else {
      this.set("minter", Value.fromString(<string>value));
    }
  }

  get equipment_type(): i32 {
    let value = this.get("equipment_type");
    return value!.toI32();
  }

  set equipment_type(value: i32) {
    this.set("equipment_type", Value.fromI32(value));
  }

  get rarity(): i32 {
    let value = this.get("rarity");
    return value!.toI32();
  }

  set rarity(value: i32) {
    this.set("rarity", Value.fromI32(value));
  }

  get dominant_stat(): i32 {
    let value = this.get("dominant_stat");
    return value!.toI32();
  }

  set dominant_stat(value: i32) {
    this.set("dominant_stat", Value.fromI32(value));
  }

  get extremity(): i32 {
    let value = this.get("extremity");
    return value!.toI32();
  }

  set extremity(value: i32) {
    this.set("extremity", Value.fromI32(value));
  }

  get atk(): i32 {
    let value = this.get("atk");
    return value!.toI32();
  }

  set atk(value: i32) {
    this.set("atk", Value.fromI32(value));
  }

  get def(): i32 {
    let value = this.get("def");
    return value!.toI32();
  }

  set def(value: i32) {
    this.set("def", Value.fromI32(value));
  }

  get eva(): i32 {
    let value = this.get("eva");
    return value!.toI32();
  }

  set eva(value: i32) {
    this.set("eva", Value.fromI32(value));
  }

  get hp(): i32 {
    let value = this.get("hp");
    return value!.toI32();
  }

  set hp(value: i32) {
    this.set("hp", Value.fromI32(value));
  }

  get pen(): i32 {
    let value = this.get("pen");
    return value!.toI32();
  }

  set pen(value: i32) {
    this.set("pen", Value.fromI32(value));
  }

  get crit(): i32 {
    let value = this.get("crit");
    return value!.toI32();
  }

  set crit(value: i32) {
    this.set("crit", Value.fromI32(value));
  }

  get luk(): i32 {
    let value = this.get("luk");
    return value!.toI32();
  }

  set luk(value: i32) {
    this.set("luk", Value.fromI32(value));
  }

  get res(): i32 {
    let value = this.get("res");
    return value!.toI32();
  }

  set res(value: i32) {
    this.set("res", Value.fromI32(value));
  }
}
