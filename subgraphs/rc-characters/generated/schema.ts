// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Owner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Owner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Owner", id.toString(), this);
    }
  }

  static load(id: string): Owner | null {
    return changetype<Owner | null>(store.get("Owner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get characters(): Array<string> {
    let value = this.get("characters");
    return value!.toStringArray();
  }

  set characters(value: Array<string>) {
    this.set("characters", Value.fromStringArray(value));
  }
}

export class Minter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Minter entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Minter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Minter", id.toString(), this);
    }
  }

  static load(id: string): Minter | null {
    return changetype<Minter | null>(store.get("Minter", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get characters(): Array<string> {
    let value = this.get("characters");
    return value!.toStringArray();
  }

  set characters(value: Array<string>) {
    this.set("characters", Value.fromStringArray(value));
  }
}

export class Character extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Character entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Character must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Character", id.toString(), this);
    }
  }

  static load(id: string): Character | null {
    return changetype<Character | null>(store.get("Character", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get idNum(): i32 {
    let value = this.get("idNum");
    return value!.toI32();
  }

  set idNum(value: i32) {
    this.set("idNum", Value.fromI32(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get minter(): string | null {
    let value = this.get("minter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set minter(value: string | null) {
    if (!value) {
      this.unset("minter");
    } else {
      this.set("minter", Value.fromString(<string>value));
    }
  }

  get character_name(): string | null {
    let value = this.get("character_name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set character_name(value: string | null) {
    if (!value) {
      this.unset("character_name");
    } else {
      this.set("character_name", Value.fromString(<string>value));
    }
  }

  get character_class(): i32 {
    let value = this.get("character_class");
    return value!.toI32();
  }

  set character_class(value: i32) {
    this.set("character_class", Value.fromI32(value));
  }

  get element(): i32 {
    let value = this.get("element");
    return value!.toI32();
  }

  set element(value: i32) {
    this.set("element", Value.fromI32(value));
  }

  get str(): i32 {
    let value = this.get("str");
    return value!.toI32();
  }

  set str(value: i32) {
    this.set("str", Value.fromI32(value));
  }

  get vit(): i32 {
    let value = this.get("vit");
    return value!.toI32();
  }

  set vit(value: i32) {
    this.set("vit", Value.fromI32(value));
  }

  get dex(): i32 {
    let value = this.get("dex");
    return value!.toI32();
  }

  set dex(value: i32) {
    this.set("dex", Value.fromI32(value));
  }

  get talent(): i32 {
    let value = this.get("talent");
    return value!.toI32();
  }

  set talent(value: i32) {
    this.set("talent", Value.fromI32(value));
  }

  get mood(): i32 {
    let value = this.get("mood");
    return value!.toI32();
  }

  set mood(value: i32) {
    this.set("mood", Value.fromI32(value));
  }

  get exp(): i32 {
    let value = this.get("exp");
    return value!.toI32();
  }

  set exp(value: i32) {
    this.set("exp", Value.fromI32(value));
  }
}
